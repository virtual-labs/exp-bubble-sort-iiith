{
    "version": 2.0,
    "questions": [
        {
            "question": "1. How many iterations of the outer loop are needed by the algorithm when the input array of size N is already sorted?",
            "answers": {
                "a": "0",
                "b": "1",
                "c": "N",
                "d": "2N"
            },
            "correctAnswer": "b",
            "explanations": {
                "a": "Although the array is sorted, the algorithm requires an extra iteration to detect that the array is already sorted by observing that no swaps occur.",
                "b": "1 iteration is required by the algorithm to detect that the array is sorted by observing that no swaps occur during the iteration.",
                "c": "This will be the number of iterations of the inner loop and not the outer loop. The outer loop only requires N iterations in the worst case when the array is in the reverse order.",
                "d": "It is not possible for the outer loop to have more than N iterations even in the worst case."
            },
            "difficulty": "beginner"
        },
        {
            "question": "2. How many comparisons (same as the number of iterations of the inner loop) are required in the next iteration after T iterations of the outer loop in the optimized algorithm? The array size is N.",
            "answers": {
                "a": "N",
                "b": "N - 1",
                "c": "N - T",
                "d": "N - T + 1"
            },
            "correctAnswer": "c",
            "explanations": {
                "a": "We can never have N comparisons, not even in the unoptimized algorithm. Generally, we compare all pairs of adjacent elements and maximum N - 1 such pairs exist for any array of size N.",
                "b": "We do not need to compare all the adjacent elements each time as at the end of each iteration at least one more element ends up in the right place and hence some comparisons can be skipped.",
                "c": "After T iterations, T largest elements are correctly sorted and need not be compared in the consequent iterations.",
                "d": "This answer is obtained by misunderstanding the question, specifically the value of T. This would have been the right answer if the question asked the number of comparisons in the Tth iteration as then only (T - 1) largest elements would be sorted. However, the current question implies that T largest elements are already sorted."
            },
            "difficulty": "intermediate"
        },
        {
            "question": "3. How do we check if our array is sorted in order to preemptively stop the optimized algorithm?",
            "answers": {
                "a": "Run an extra iteration as part of the current iteration and check that all adjacent elements are in the right order.",
                "b": "Check if any swaps occurred in the current iteration.",
                "c": "There is no way to preemptively stop the algorithm, i.e, a minimum of N - 1 iterations is required where N is the array size.",
                "d": "None of the above"
            },
            "correctAnswer": "b",
            "explanations": {
                "a": "While this can be done, there is a more optimal way to do the check such that the extra iteration also is not required.",
                "b": "We can simply maintain a boolean flag/variable initialised to false at the beginning of each iteration and it is set to true whenever a swap occurs. Hence if it turns out to be false at the end of the iteration, it means that no swaps occurred which in turn implies that the array is sorted. Hence, we can break the loop.",
                "c": "There is a way to preemptively stop the algorithm at least in some cases as sometimes the array may be sorted in fewer than N - 1 iterations.",
                "d": "One of the other options does contain the correct answer."
            },
            "difficulty": "intermediate"
        }
    ]
}
     